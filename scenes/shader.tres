[gd_resource type="ShaderMaterial" load_steps=6 format=2]

[ext_resource path="res://sprites/palettes/palette_skin.png" type="Texture" id=1]
[ext_resource path="res://sprites/palettes/hair_0.png" type="Texture" id=2]
[ext_resource path="res://sprites/palettes/skin_0.png" type="Texture" id=3]
[ext_resource path="res://sprites/palettes/palette_hair.png" type="Texture" id=4]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform sampler2D palette_skin;
uniform sampler2D palette_hair;
uniform sampler2D replace_skin;
uniform sampler2D replace_hair;

const int num_colors = 5; 

void fragment() {
	vec4 color = texture(TEXTURE, UV);
	vec4 result_color = color;
	for (int i = 0; i < num_colors; i ++) {
		vec2 uv = vec2(1.0/float(num_colors) * float(i), 0.0);
		if (distance(color, texture(palette_skin, uv)) < 0.1) {
			result_color = texture(replace_skin, uv);
			break
		} else if (distance(color, texture(palette_hair, uv)) < 0.1) {
			result_color = texture(replace_hair, uv);
			break
		}
	}
	COLOR = result_color;
}"

[resource]
shader = SubResource( 1 )
shader_param/palette_skin = ExtResource( 1 )
shader_param/palette_hair = ExtResource( 4 )
shader_param/replace_skin = ExtResource( 3 )
shader_param/replace_hair = ExtResource( 2 )
